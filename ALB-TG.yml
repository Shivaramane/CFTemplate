Description: "Create ALB, ALB security group, target groups, listeners and listener rules"
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16	
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

Resources:    

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.192.10.0/24

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.192.11.0/24

  ALBSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for ALB"
            GroupName: "test-ALB-SG"
            Tags: 
              - 
                Key: "Name"
                Value: "test-ALB-SG"
            VpcId: !Ref VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
                
  ApplicationLoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
          Name: "test-Application-Load-Balancer"
          Scheme: "internet-facing"
          Type: "application"
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: 
            - !Ref ALBSecurityGroup
          IpAddressType: "ipv4"
          LoadBalancerAttributes: 
            - 
              Key: "access_logs.s3.enabled"
              Value: "false"
            - 
              Key: "idle_timeout.timeout_seconds"
              Value: "60"
            - 
              Key: "deletion_protection.enabled"
              Value: "false"
            - 
              Key: "routing.http2.enabled"
              Value: "true"
            - 
              Key: "routing.http.drop_invalid_header_fields.enabled"
              Value: "false"

  HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref ApplicationLoadBalancer
          Port: 80
          Protocol: "HTTP"
          DefaultActions: 
            - 
              Order: 1
              RedirectConfig: 
                  Protocol: "HTTPS"
                  Port: "443"
                  Host: "#{host}"
                  Path: "/#{path}"
                  Query: "#{query}"
                  StatusCode: "HTTP_301"
              Type: "redirect"
              
  Test1TargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: "/"
          Port: 80
          Protocol: "HTTP"
          HealthCheckPort: "traffic-port"
          HealthCheckProtocol: "HTTP"
          HealthCheckTimeoutSeconds: 5
          UnhealthyThresholdCount: 2
          TargetType: "instance"
          Matcher: 
              HttpCode: "200"
          HealthyThresholdCount: 5
          VpcId: !Ref VPC
          Name: "target-group-1"
          HealthCheckEnabled: true
          TargetGroupAttributes: 
            - 
              Key: "stickiness.enabled"
              Value: "false"
            - 
              Key: "deregistration_delay.timeout_seconds"
              Value: "300"
            - 
              Key: "stickiness.type"
              Value: "lb_cookie"
            - 
              Key: "stickiness.lb_cookie.duration_seconds"
              Value: "86400"
            - 
              Key: "slow_start.duration_seconds"
              Value: "0"
            - 
              Key: "load_balancing.algorithm.type"
              Value: "round_robin"
             
  TestListenerRule1:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
          Priority: "1"
          ListenerArn: !Ref HTTPListener
          Conditions: 
            - 
              Field: "host-header"
              Values: 
                - "test1.blog.com"
          Actions: 
            - 
              Type: "forward"
              TargetGroupArn: !Ref Test1TargetGroup
              Order: 1
              ForwardConfig: 
                  TargetGroups: 
                    - 
                      TargetGroupArn: !Ref Test1TargetGroup
                      Weight: 1
                  TargetGroupStickinessConfig: 
                      Enabled: false

 
Outputs:        
  ALB:
        Description: The created loadbalancer
        Value: !Ref ApplicationLoadBalancer

  TargetGroup1:
        Description: The created TargetGroup 1
        Value: !Ref Test1TargetGroup

  LoadBalancerSecurityGroup:
        Description: the securty group for the ALB
        Value: !Ref ALBSecurityGroup

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
